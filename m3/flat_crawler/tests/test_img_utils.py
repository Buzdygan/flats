
from unittest.mock import patch
from PIL import Image
from io import BytesIO

from flat_crawler.utils.img_utils import get_img_bytes_from_url, img_urls_to_bytes, bytes_to_images
from flat_crawler.exceptions import URLFailedToLoadException
from flat_crawler.constants import THUMBNAIL_SIZE

IMG_BYTES = b'\x89PNG\r\n\x1a\n\x00\x00\x00\rIHDR\x00\x00\x00\x04\x00\x00\x00\x02\x08\x02\x00\x00\x00\xf0\xca\xea4\x00\x00\x00#IDATx\x9cc\xec\xcd\x0bcgg\x15\x97S\xfe\xfe\xf1\x1d\xd3\xf37\xef\xfer\x8b\xfegb~\xf1\xfc)\x00\x85\xf4\x0c,c1A\xca\x00\x00\x00\x00IEND\xaeB`\x82'
COMPRESSED_BYTES = b'\xff\xd8\xff\xe0\x00\x10JFIF\x00\x01\x01\x00\x00\x01\x00\x01\x00\x00\xff\xdb\x00C\x00\x14\x0e\x0f\x12\x0f\r\x14\x12\x10\x12\x17\x15\x14\x18\x1e2!\x1e\x1c\x1c\x1e=,.$2I@LKG@FEPZsbPUmVEFd\x88emw{\x81\x82\x81N`\x8d\x97\x8c}\x96s~\x81|\xff\xdb\x00C\x01\x15\x17\x17\x1e\x1a\x1e;!!;|SFS||||||||||||||||||||||||||||||||||||||||||||||||||\xff\xc0\x00\x11\x08\x00d\x00\x96\x03\x01"\x00\x02\x11\x01\x03\x11\x01\xff\xc4\x00\x18\x00\x01\x01\x01\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x02\x00\x01\x03\x04\xff\xc4\x00\x17\x10\x01\x01\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x11\x02\xff\xc4\x00\x16\x01\x01\x01\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x01\x03\xff\xc4\x00\x14\x11\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\xff\xda\x00\x0c\x03\x01\x00\x02\x11\x03\x11\x00?\x00\xe6\x92`\xdd5\x88\x12H\x1aPJ\x01C\x81\x0e\x08p\xa0\xc2Q\xac\xa9P\x1a\xc6\xd6PbI\x04\x92Q\xe6LB\xb51 \xd4\x906\x14\x18P\x0e\x1c\x08qP\xa124D\xca\xd6Pe\x1a\xda\xca+\x12b\rL\xd4\xaa\xf2\xebt5\xba!kCH\x1a\xd8\xc8\xd8\x05\n\x0c(\x05\x0e\x0c8!F\xb25D\xca\xd1\xa8\re\xaa\x8d\xa2\xadZ:\xb5\x15\xba\x87P<\xda\xb4uj\xa1\xeb`JP\x0e\x14\x08pC\x85\x06\x1cP\xa1A\x87\x00\xa3Y\x1a\x0c\xa1N\x87H\x05\x0bJ\x85\xa2\xb2\xd5\xac\xb5\x9a\x8a\xddC\xa8\x1emh\xb5P\xa1@\x85\x01\xd2\x1cs\x8e\x9c\xaa\x1c80\xa2\xa1\xc3\x81\x0e\x03Z\x92\x03C\xa3\xa1\xd2+\x9fNt\xfa\n\x8a6\xb3U`\xabS\x108&5P\xa1@\x87\x04>]9s\xe5\xd3\x95GHp!\xc5C\x85\x06\x14\x14\x92\x89\x01\xae}:W>\x91\\\xfas\xae\x9d9\xd4P\xacm`\xacI\x03\x83RTl8\x90\x87\xcb\xa7)*:C\x89*\x1c(\x90\xa5\x12H\rs\xe9$W.\x83\xa4\x91B\x8aB\xa4\x90?\xff\xd9'

GOOD_URL = 'https://good.url.com'


def mock_get_img_from_url(img_url, resize=None):
    if img_url != GOOD_URL:
        raise URLFailedToLoadException

    img = Image.open(BytesIO(IMG_BYTES))
    if resize:
        img = img.resize(resize)
    return img


@patch('flat_crawler.utils.img_utils.get_img_from_url', new=mock_get_img_from_url)
def test_get_img_bytes_from_url():
    assert get_img_bytes_from_url(img_url=GOOD_URL) == COMPRESSED_BYTES


@patch('flat_crawler.utils.img_utils.get_img_from_url', new=mock_get_img_from_url)
def test_storing_images_as_bytes():
    urls = [GOOD_URL, GOOD_URL, 'bad url', GOOD_URL]
    img_bytes = img_urls_to_bytes(img_urls=urls)
    images = bytes_to_images(img_bytes)
    assert len(images) == 3
    for img in images:
        assert img.size == THUMBNAIL_SIZE
